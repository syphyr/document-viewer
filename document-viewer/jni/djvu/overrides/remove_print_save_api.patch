diff --git a/libdjvu/ddjvuapi.cpp b/libdjvu/ddjvuapi.cpp
index c6cecfe..6ba6a02 100644
--- a/libdjvu/ddjvuapi.cpp
+++ b/libdjvu/ddjvuapi.cpp
@@ -2760,687 +2760,6 @@ ddjvu_runnablejob_s::stop()
 }
 
 
-// ----------------------------------------
-// Printing
-
-struct DJVUNS ddjvu_printjob_s : public ddjvu_runnablejob_s
-{
-  DjVuToPS printer;
-  GUTF8String pages;
-  GP<ByteStream> obs;
-  virtual ddjvu_status_t run();
-  // virtual port functions:
-  virtual bool inherits(const GUTF8String&) const;
-  // progress
-  static void cbrefresh(void*);
-  static void cbprogress(double, void*);
-  static void cbinfo(int, int, int, DjVuToPS::Stage, void*);
-  double progress_low;
-  double progress_high;
-};
-
-bool 
-ddjvu_printjob_s::inherits(const GUTF8String &classname) const
-{
-  return (classname == "ddjvu_printjob_s") 
-    || ddjvu_runnablejob_s::inherits(classname);
-}
-
-ddjvu_status_t 
-ddjvu_printjob_s::run()
-{
-  mydoc->doc->wait_for_complete_init();
-  progress_low = 0;
-  progress_high = 1;
-  printer.set_refresh_cb(cbrefresh, (void*)this);
-  printer.set_dec_progress_cb(cbprogress, (void*)this);
-  printer.set_prn_progress_cb(cbprogress, (void*)this);
-  printer.set_info_cb(cbinfo, (void*)this);
-  printer.print(*obs, mydoc->doc, pages);
-  return DDJVU_JOB_OK;
-}
-
-void
-ddjvu_printjob_s::cbrefresh(void *data)
-{
-  ddjvu_printjob_s *self = (ddjvu_printjob_s*)data;
-  if (self->mystop)
-    {
-      msg_push(xhead(DDJVU_INFO,self), msg_prep_info("Print job stopped"));
-      G_THROW(DataPool::Stop);
-    }
-}
-
-void
-ddjvu_printjob_s::cbprogress(double done, void *data)
-{
-  ddjvu_printjob_s *self = (ddjvu_printjob_s*)data;
-  double &low = self->progress_low;
-  double &high = self->progress_high;
-  double progress = low;
-  if (done >= 1)
-    progress = high;
-  else if (done >= 0)
-    progress = low + done * (high-low);
-  self->progress((int)(progress * 100));
-  ddjvu_printjob_s::cbrefresh(data);
-}
-
-void
-ddjvu_printjob_s::cbinfo(int pnum, int pcnt, int ptot,
-                         DjVuToPS::Stage stage, void *data)
-{
-  ddjvu_printjob_s *self = (ddjvu_printjob_s*)data;
-  double &low = self->progress_low;
-  double &high = self->progress_high;
-  low = 0;
-  high = 1;
-  if (ptot > 0) 
-    {
-      double step = 1.0 / (double)ptot;
-      low = (double)pcnt * step;
-      if (stage != DjVuToPS::DECODING) 
-	low += step / 2.0;
-      high = low  + step / 2.0;
-    }
-  if (low < 0)
-    low = 0;
-  if (low > 1) 
-    low = 1;
-  if (high < low) 
-    high = low;
-  if (high > 1)
-    high = 1;
-  self->progress((int)(low * 100));
-  ddjvu_printjob_s::cbrefresh(data);
-}
-
-static void
-complain(GUTF8String opt, const char *msg)
-{
-  GUTF8String message;
-  if (opt.length() > 0)
-    message = "Parsing \"" + opt + "\": " + msg;
-  else
-    message = msg;
-  G_RETHROW(GException((const char*)message));
-}
-
-ddjvu_job_t *
-ddjvu_document_print(ddjvu_document_t *document, FILE *output,
-                     int optc, const char * const * optv)
-{
-  ddjvu_printjob_s *job = 0;
-  G_TRY
-    {
-      job = new ddjvu_printjob_s;
-      ref(job);
-      job->myctx = document->myctx;
-      job->mydoc = document;
-      // parse options (see djvups(1))
-      DjVuToPS::Options &options = job->printer.options;
-      GUTF8String &pages = job->pages;
-      while (optc>0)
-        {
-          // normalize
-          GNativeString narg(optv[0]);
-          GUTF8String uarg = narg;
-          const char *s1 = (const char*)narg;
-          if (s1[0] == '-') s1++;
-          if (s1[0] == '-') s1++;
-          // separate arguments
-          const char *s2 = s1;
-          while (*s2 && *s2 != '=') s2++;
-          GUTF8String s( s1, s2-s1 );
-          GUTF8String arg( s2[0] && s2[1] ? s2+1 : "" );
-          // rumble!
-          if (s == "page" || s == "pages")
-            {
-              if (pages.length())
-                pages = pages + ",";
-              pages = pages + arg;
-            }
-          else if (s == "format")
-            {
-              if (arg == "ps")
-                options.set_format(DjVuToPS::Options::PS);
-              else if (arg == "eps")
-                options.set_format(DjVuToPS::Options::EPS);
-              else
-                complain(uarg,"Invalid format. Use \"ps\" or \"eps\".");
-            }
-          else if (s == "level")
-            {
-              int endpos;
-              int lvl = arg.toLong(0, endpos);
-              if (endpos != (int)arg.length() || lvl < 1 || lvl > 4)
-                complain(uarg,"Invalid Postscript language level.");
-              options.set_level(lvl);
-            }
-          else if (s == "orient" || s == "orientation")
-            {
-              if (arg == "a" || arg == "auto" )
-                options.set_orientation(DjVuToPS::Options::AUTO);
-              else if (arg == "l" || arg == "landscape" )
-                options.set_orientation(DjVuToPS::Options::LANDSCAPE);
-              else if (arg == "p" || arg == "portrait" )
-                options.set_orientation(DjVuToPS::Options::PORTRAIT);
-              else
-                complain(uarg,"Invalid orientation. Use \"auto\", "
-                         "\"landscape\" or \"portrait\".");
-            }
-          else if (s == "mode")
-            {
-              if (arg == "c" || arg == "color" )
-                options.set_mode(DjVuToPS::Options::COLOR);
-              else if (arg == "black" || arg == "bw")
-                options.set_mode(DjVuToPS::Options::BW);
-              else if (arg == "fore" || arg == "foreground")
-                options.set_mode(DjVuToPS::Options::FORE);
-              else if (arg == "back" || arg == "background" )
-                options.set_mode(DjVuToPS::Options::BACK);
-              else
-                complain(uarg,"Invalid mode. Use \"color\", \"bw\", "
-                         "\"foreground\", or \"background\".");
-            }
-          else if (s == "zoom")
-            {
-              if (arg == "auto" || arg == "fit" || arg == "fit_page")
-                options.set_zoom(0);
-              else if (arg == "1to1" || arg == "onetoone")
-                options.set_zoom(100);                
-              else 
-                {
-                  int endpos;
-                  int z = arg.toLong(0,endpos);
-                  if (endpos != (int)arg.length() || z < 25 || z > 2400)
-                    complain(uarg,"Invalid zoom factor.");
-                  options.set_zoom(z);
-                }
-            }
-          else if (s == "color")
-            {
-              if (arg == "yes" || arg == "")
-                options.set_color(true);
-              else if (arg == "no")
-                options.set_color(false);
-              else
-                complain(uarg,"Invalid argument. Use \"yes\" or \"no\".");
-            }
-          else if (s == "gray" || s == "grayscale")
-            {
-              if (arg.length())
-                complain(uarg,"No argument was expected.");
-              options.set_color(false);
-            }
-          else if (s == "srgb" || s == "colormatch")
-            {
-              if (arg == "yes" || arg == "")
-                options.set_sRGB(true);
-              else if (arg == "no")
-                options.set_sRGB(false);
-              else
-                complain(uarg,"Invalid argument. Use \"yes\" or \"no\".");
-            }
-          else if (s == "gamma")
-            {
-              int endpos;
-              double g = arg.toDouble(0,endpos);
-              if (endpos != (int)arg.length() || g < 0.3 || g > 5.0)
-                complain(uarg,"Invalid gamma factor. "
-                              "Use a number in range 0.3 ... 5.0.");
-              options.set_gamma(g);
-            }
-          else if (s == "copies")
-            {
-              int endpos;
-              int n = arg.toLong(0, endpos);
-              if (endpos != (int)arg.length() || n < 1 || n > 999999)
-                complain(uarg,"Invalid number of copies.");
-              options.set_copies(n);
-            }
-          else if (s == "frame")
-            {
-              if (arg == "yes" || arg == "")
-                options.set_frame(true);
-              else if (arg == "no")
-                options.set_frame(false);
-              else
-                complain(uarg,"Invalid argument. Use \"yes\" or \"no\".");
-            }
-          else if (s == "cropmarks")
-            {
-              if (arg == "yes" || arg == "")
-                options.set_cropmarks(true);
-              else if (arg == "no")
-                options.set_cropmarks(false);
-              else
-                complain(uarg,"Invalid argument. Use \"yes\" or \"no\".");
-            }
-          else if (s == "text")
-            {
-              if (arg == "yes" || arg == "")
-                options.set_text(true);
-              else if (arg == "no")
-                options.set_text(false);
-              else
-                complain(uarg,"Invalid argument. Use \"yes\" or \"no\".");
-            }
-          else if (s == "booklet")
-            {
-              if (arg == "no")
-                options.set_bookletmode(DjVuToPS::Options::OFF);
-              else if (arg == "recto")
-                options.set_bookletmode(DjVuToPS::Options::RECTO);
-              else if (arg == "verso")
-                options.set_bookletmode(DjVuToPS::Options::VERSO);
-              else if (arg == "rectoverso" || arg=="yes" || arg=="")
-                options.set_bookletmode(DjVuToPS::Options::RECTOVERSO);
-              else 
-                complain(uarg,"Invalid argument."
-                         "Use \"no\", \"yes\", \"recto\", or \"verso\".");
-            }
-          else if (s == "bookletmax")
-            {
-              int endpos;
-              int n = arg.toLong(0, endpos);
-              if (endpos != (int)arg.length() || n < 0 || n > 999999)
-                complain(uarg,"Invalid argument.");
-              options.set_bookletmax(n);
-            }
-          else if (s == "bookletalign")
-            {
-              int endpos;
-              int n = arg.toLong(0, endpos);
-              if (endpos != (int)arg.length() || n < -720 || n > +720)
-                complain(uarg,"Invalid argument.");
-              options.set_bookletalign(n);
-            }
-          else if (s == "bookletfold")
-            {
-              int endpos = 0;
-              int m = 250;
-              int n = arg.toLong(0, endpos);
-              if (endpos>0 && endpos<(int)arg.length() && arg[endpos]=='+')
-                m = arg.toLong(endpos+1, endpos);
-              if (endpos != (int)arg.length() || m<0 || m>720 || n<0 || n>9999 )
-                complain(uarg,"Invalid argument.");
-              options.set_bookletfold(n,m);
-            }
-          else
-            {
-              complain(uarg, "Unrecognized option.");
-            }
-          // Next option
-          optc -= 1;
-          optv += 1;
-        }
-      // go
-      job->obs = ByteStream::create(output, "wb", false);
-      job->start();
-    }
-  G_CATCH(ex)
-    {
-      if (job) 
-        unref(job);
-      job = 0;
-      ERROR1(document, ex);
-    }
-  G_ENDCATCH;
-  return job;
-}
-
-
-
-// ----------------------------------------
-// Saving
-
-struct DJVUNS ddjvu_savejob_s : public ddjvu_runnablejob_s
-{
-  GP<ByteStream> obs;
-  GURL           odir;  
-  GUTF8String    oname;
-  GUTF8String    pages;
-  GTArray<char>       comp_flags;
-  GArray<GUTF8String> comp_ids;
-  GPArray<DjVuFile>   comp_files;
-  GMonitor monitor;
-  // thread routine
-  virtual ddjvu_status_t run();
-  // virtual port functions:
-  virtual bool inherits(const GUTF8String&) const;
-  virtual void notify_file_flags_changed(const DjVuFile*, long, long);
-  // helpers
-  bool parse_pagespec(const char *s, int npages, bool *flags);
-  void mark_included_files(DjVuFile *file);
-};
-
-bool 
-ddjvu_savejob_s::inherits(const GUTF8String &classname) const
-{
-  return (classname == "ddjvu_savejob_s") 
-    || ddjvu_runnablejob_s::inherits(classname);
-}
-
-void
-ddjvu_savejob_s::notify_file_flags_changed(const DjVuFile *file, 
-                                           long mask, long)
-{
-  if (mask & (DjVuFile::ALL_DATA_PRESENT | DjVuFile::DATA_PRESENT |
-              DjVuFile::DECODE_FAILED | DjVuFile::DECODE_STOPPED | 
-              DjVuFile::STOPPED ))
-    {
-      GMonitorLock lock(&monitor);
-      monitor.signal();
-    }
-}
-
-bool
-ddjvu_savejob_s::parse_pagespec(const char *s, int npages, bool *flags)
-{
-  int spec = 0;
-  int both = 1;
-  int start_page = 1;
-  int end_page = npages;
-  int pageno;
-  char *p = (char*)s;
-  while (*p)
-    {
-      spec = 0;
-      while (*p==' ')
-        p += 1;
-      if (! *p)
-        break;
-      if (*p>='0' && *p<='9') {
-        end_page = strtol(p, &p, 10);
-        spec = 1;
-      } else if (*p=='$') {
-        spec = 1;
-        end_page = npages;
-        p += 1;
-      } else if (both) {
-        end_page = 1;
-      } else {
-        end_page = npages;
-      }
-      while (*p==' ')
-        p += 1;
-      if (both) {
-        start_page = end_page;
-        if (*p == '-') {
-          p += 1;
-          both = 0;
-          continue;
-        }
-      }
-      both = 1;
-      while (*p==' ')
-        p += 1;
-      if (*p && *p != ',')
-        return false;
-      if (*p == ',')
-        p += 1;
-      if (! spec)
-        return false;
-      if (end_page <= 0)
-        end_page = 1;
-      if (start_page <= 0)
-        start_page = 1;
-      if (end_page > npages)
-        end_page = npages;
-      if (start_page > npages)
-        start_page = npages;
-      if (start_page <= end_page)
-        for(pageno=start_page; pageno<=end_page; pageno++)
-          flags[pageno-1] = true;
-      else
-        for(pageno=start_page; pageno>=end_page; pageno--)
-          flags[pageno-1] = true;
-    }
-  if (!spec)
-    return false;
-  return true;
-}
-
-void 
-ddjvu_savejob_s::mark_included_files(DjVuFile *file)
-{
-  GP<DataPool> pool = file->get_init_data_pool();
-  GP<ByteStream> str(pool->get_stream());
-  GP<IFFByteStream> iff(IFFByteStream::create(str));
-  GUTF8String chkid;
-  if (!iff->get_chunk(chkid)) 
-    return;
-  while (iff->get_chunk(chkid))
-    {
-      if (chkid == "INCL")
-        {
-          GP<ByteStream> incl = iff->get_bytestream();
-          GUTF8String fileid;
-          char buffer[1024];
-          int length;
-          while((length=incl->read(buffer, 1024)))
-            fileid += GUTF8String(buffer, length);
-          for (int i=0; i<comp_ids.size(); i++)
-            if (fileid == comp_ids[i] && !comp_flags[i])
-              comp_flags[i] = 1;
-        }
-      iff->close_chunk();
-    }
-  iff->close_chunk();
-  pool->clear_stream();
-}
-
-ddjvu_status_t 
-ddjvu_savejob_s::run()
-{
-  DjVuDocument *doc = mydoc->doc;
-  doc->wait_for_complete_init();
-
-  // Determine which pages to save
-  int npages = doc->get_pages_num();
-  GTArray<bool> page_flags(0, npages-1);
-  if (!pages)
-    {
-      for (int pageno=0; pageno<npages; pageno++)
-        page_flags[pageno] = true;
-    }
-  else
-    {
-      const char *s = pages;
-      while (*s && *s!='=')
-        s += 1;
-      for (int pageno=0; pageno<npages; pageno++)
-        page_flags[pageno] = false;
-      if ((*s != '=') || !parse_pagespec(s+1, npages, (bool*)page_flags))
-        complain(pages,"Illegal page specification");
-      if (doc->get_doc_type()==DjVuDocument::OLD_BUNDLED ||
-          doc->get_doc_type()==DjVuDocument::OLD_INDEXED )
-        complain(pages,"Saving subsets of obsolete formats is not supported");
-    }
-  
-  // Determine which component files to save
-  int ncomps;
-  if (doc->get_doc_type()==DjVuDocument::BUNDLED ||
-      doc->get_doc_type()==DjVuDocument::INDIRECT)
-    {
-      GP<DjVmDir> dir = doc->get_djvm_dir();
-      ncomps = dir->get_files_num();
-      comp_ids.resize(ncomps - 1);
-      comp_flags.resize(ncomps - 1);
-      comp_files.resize(ncomps - 1);
-      int pageno = 0;
-      GPList<DjVmDir::File> flist = dir->get_files_list();
-      GPosition pos=flist;
-      for (int comp=0; comp<ncomps; ++pos, ++comp)
-        {
-          DjVmDir::File *file = flist[pos];
-          comp_ids[comp] = file->get_load_name();
-          comp_flags[comp] = 0;
-          if (file->is_page() && page_flags[pageno++])
-            comp_flags[comp] = 1;
-        }
-    }
-  else
-    {
-      ncomps = npages;
-      comp_flags.resize(ncomps - 1);
-      comp_files.resize(ncomps - 1);
-      for (int comp=0; comp<ncomps; ++comp)
-        comp_flags[comp] = page_flags[comp];
-    }
-  
-  // Download
-  get_portcaster()->add_route(doc, this);
-  while (!mystop)
-    {
-      int comp;
-      int wanted = 0;
-      int loaded = 0;
-      int asked = 0;
-      for (comp=0; comp<ncomps; comp++)
-        {
-          int flags = comp_flags[comp];
-          if (flags > 2)
-            loaded += 1;
-          else if (flags < 2)
-            continue;
-          else if (!comp_files[comp]->is_data_present())
-            asked += 1;
-          else 
-            {
-              comp_flags[comp] += 1;
-              mark_included_files(comp_files[comp]);
-            } 
-        }
-      for (comp=0; comp<ncomps; comp++)
-        if (comp_flags[comp] > 0)
-          wanted += 1;
-      progress(loaded * 100 / wanted);
-      if (wanted == loaded)
-        break;
-      for (comp=0; comp<ncomps && asked < 2; comp++)
-        if (comp_flags[comp] == 1)
-          {
-            if (comp_ids.size() > 0)
-              comp_files[comp] = doc->get_djvu_file(comp_ids[comp]);
-            else
-              comp_files[comp] = doc->get_djvu_file(comp);
-            comp_flags[comp] += 1;
-            if (!comp_files[comp]->is_data_present())
-              asked += 1;
-          }
-      GMonitorLock lock(&monitor);
-      for (comp=0; comp<ncomps; comp++)
-        if (comp_flags[comp] == 2)
-          if (! comp_files[comp]->is_data_present())
-            {
-              monitor.wait();
-              break;
-            }
-    }
-  if (mystop)
-    G_THROW(DataPool::Stop);
-  // Saving!
-  GP<DjVmDoc> djvm;
-  if (! pages)
-    {
-      djvm = doc->get_djvm_doc();
-    }
-  else
-    {
-      djvm = DjVmDoc::create();
-      GP<DjVmDir> dir = doc->get_djvm_dir();
-      GPList<DjVmDir::File> flist = dir->get_files_list();
-      GPosition pos=flist;
-      int pageno = 0;
-      for (int comp=0; comp<ncomps; ++pos, ++comp)
-        {
-          if (flist[pos]->is_page())
-            pageno += 1;
-          if (comp_flags[comp])
-            {
-              GP<DjVmDir::File> f = new DjVmDir::File(*flist[pos]);
-              if (f->is_page() && f->get_save_name()==f->get_title())
-                f->set_title(GUTF8String(pageno));
-              GP<DjVuFile> file = comp_files[comp];
-              GP<DataPool> data = file->get_init_data_pool();
-              djvm->insert_file(f, data);
-            }
-        }
-    }
-  if (obs)
-    djvm->write(obs);
-  else if (odir.is_valid() && oname.length() > 0)
-    djvm->expand(odir, oname);
-  return DDJVU_JOB_OK;
-}
-
-
-ddjvu_job_t *
-ddjvu_document_save(ddjvu_document_t *document, FILE *output, 
-                    int optc, const char * const * optv)
-{
-  ddjvu_savejob_s *job = 0;
-  G_TRY
-    {
-      job = new ddjvu_savejob_s;
-      ref(job);
-      job->myctx = document->myctx;
-      job->mydoc = document;
-      bool indirect = false;
-      // parse options
-      while (optc>0)
-        {
-          GNativeString narg(optv[0]);
-          GUTF8String uarg = narg;
-          const char *s1 = (const char*)narg;
-          if (s1[0] == '-') s1++;
-          if (s1[0] == '-') s1++;
-          // separate arguments
-          if (!strncmp(s1, "page=", 5) ||
-              !strncmp(s1, "pages=", 6) )
-            {
-              if (job->pages.length())
-                complain(uarg,"multiple page specifications");
-              job->pages = uarg;
-            }
-          else if (!strncmp(s1, "indirect=", 9))
-            {
-              GURL oname = GURL::Filename::UTF8(s1 + 9);
-              job->odir = oname.base();
-              job->oname = oname.fname();
-              indirect = true;
-            }
-          else
-            {
-              complain(uarg, "Unrecognized option.");
-            }
-          // next option
-          optc -= 1;
-          optv += 1;
-        }
-      // go
-      if (!indirect)
-        job->obs = ByteStream::create(output, "wb", false);
-      else 
-        job->obs = 0;
-      job->start();
-    }
-  G_CATCH(ex)
-    {
-      if (job) 
-        unref(job);
-      job = 0;
-      ERROR1(document, ex);
-    }
-  G_ENDCATCH;
-  return job;
-}
-
-
-
-
 // ----------------------------------------
 // S-Expressions (generic)
 
diff --git a/libdjvu/ddjvuapi.h b/libdjvu/ddjvuapi.h
index dcd1947..2dfb677 100644
--- a/libdjvu/ddjvuapi.h
+++ b/libdjvu/ddjvuapi.h
@@ -1354,54 +1354,6 @@ struct ddjvu_message_progress_s {
   int percent;
 };
 
-/* ddjvu_document_print ---
-   Converts specified pages of a djvu document into postscript.  
-   This function works asynchronously in a separate thread.
-   You can use the following idiom for synchronous operation:
-
-     ddjvu_job_t *job = ddjvu_document_print(....);
-     while (! ddjvu_job_done(job) )
-       handle_ddjvu_messages(context, TRUE);
-       
-   The postscript data is written to stdio file <output>.
-   Arguments <optc> and <optv> specify printing options.
-   All options described on the <djvups> man page are 
-   recognized, except <"-help"> and <"-verbose">.
-*/
-
-DDJVUAPI ddjvu_job_t *
-ddjvu_document_print(ddjvu_document_t *document, FILE *output,
-                     int optc, const char * const * optv);
-
-
-/* ddjvu_document_save ---
-   Saves the djvu document as a bundled djvu file.
-   This function works asynchronously in a separate thread.
-   You can use the following idiom for synchronous operation:
-
-     ddjvu_job_t *job = ddjvu_document_save(....);
-     while (! ddjvu_job_done(job) )
-       handle_ddjvu_messages(context, TRUE);
-     
-   The bundled djvu data is written to file <output>
-   which must be seekable. Arguments <optc> and <optv>
-   can be used to pass the following options:
-   * Option "-pages=<pagespec>" specify a subset of pages
-     using the same syntax as program <ddjvu>.
-     Reordering or duplicating pages is prohibited. 
-   * Option "-indirect=<filename>" causes the creation
-     of an indirect document with index file <filename>
-     and auxiliary files in the same directory.
-     The file name is UTF-8 encoded.
-     When this option is specified, the argument <output>
-     is ignored and should be NULL.
-*/
-DDJVUAPI ddjvu_job_t *
-ddjvu_document_save(ddjvu_document_t *document, FILE *output, 
-                    int optc, const char * const * optv);
-
-
-
 
 /* -------------------------------------------------- */
 /* S-EXPRESSIONS                                      */
